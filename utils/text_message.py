from aiogram_dialog.widgets.text import Jinja, Text
from jinja2 import Template

main_menu = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
welcome_text = str("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n" "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é")

const_text_list_service_token = (
    "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n"
)


def status_to_icon(status, follower_type=None):
    status_icons = {
        1: "‚úÖ",
        2: "üö´",
        3: "‚ö†Ô∏è",
    }

    follower_icons = {
        "facebook_followers": "üìò",
        "twitter_followers": "üê¶",
        "reddit_followers": "üëΩ",
        "telegram_followers": "üì≤",
        "github_stars": "‚≠ê",
    }

    if follower_type:
        return follower_icons.get(follower_type, "None")
    else:
        return status_icons.get(status, "None")


# Prepare sc_base_info_template with globals
sc_base_info_template_string = """
{% if not has_base_analyse %} –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ {{error_msg}} {% else %}
<b>Token Information</b>
{% if name is not none %} –ò–º—è: {{ name }} {% endif %}
{% if token_symbol is not none %} Symbol: {{ token_symbol }} {% endif %}
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç <b>{{token_adr}}</b> –≤ —Å–µ—Ç–∏ <b>{{network_name}}</b>
<i>Creator:</i>
{% if creator.adr is not none %} Address: {{ creator.adr }} {% else %} Creator –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω {% endif %} \
{% if creator.balance is not none %} Balance: {{ creator.balance }} {% endif %} \
{% if creator.rate is not none %} Rate: {{ creator.rate }} {{ status_to_icon(creator_balance_rate.status) }} {% endif %}
<i>Owner:</i>
{% if owner.adr is not none %} Address: {{ owner.adr }} {% else %} Owner –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω {% endif %} \
{% if owner.balance is not none %} Balance: {{ owner.balance }} {% endif %} \
{% if owner.rate is not none %} Rate: {{ owner.rate }} {{ status_to_icon(owner_balance_rate.status) }} {% endif %} 
<i>Other Properties</i>
Has verified source code: {{status_to_icon(has_source_code)}}
Is Renounced: {{ status_to_icon(is_renounced.status) }}
Is Proxy: {{ status_to_icon(is_proxy.status) }}
Is Mintable: {{ status_to_icon(is_mintable.status) }}
Is Burnable: {{ status_to_icon(is_burnable.status) }}
Is Self Destructable: {{ status_to_icon(is_self_destructable.status) }}
Is Token Transferable: {{ status_to_icon(is_token_transferable.status) }}
{% endif %}"""
sc_base_info_template = Template(sc_base_info_template_string)
sc_base_info_template.globals['status_to_icon'] = status_to_icon


# Window Definition
class CustomJinjaForBaseInfo(Text):
    async def _render_text(self, data, dialog_manager):
        return sc_base_info_template.render(data)


# Prepare Jinja sc_source_code_analytic_template
sc_source_code_analytic_template_string = """
{% if not source_code_not_analyzed %}
{% if has_error %}
<b>Errors Found:</b>
{% for error in enriched_erros_data_output %}
  <b>Name:</b> {{ error.name }}
  <b>Cases:</b> {{ error.cases }}
  <b>Severity:</b> {% if error.severity == "Informational" %}üîµ {{ error.severity }}
  {% elif error.severity == "Optimization" %}üü¢ {{ error.severity }}
  {% elif error.severity == "Low" %}üü° {{ error.severity }}
  {% elif error.severity == "Medium" %}üü† {{ error.severity }}
  {% elif error.severity == "High" %}üî¥ {{ error.severity }}
  {% else %}{{ error.severity }}
  {% endif %}
  <b>Confidence:</b> {{ error.confidence }}
{% endfor %}
{% else %}
<b>No Errors Found.</b>
{% endif %}
{% endif %}
"""
sc_source_code_analytic_template = Template(sc_source_code_analytic_template_string)


# Custom Text widget for Jinja rendering
class CustomSourceCodeAnalyticJinja(Text):
    async def _render_text(self, data, dialog_manager):
        return sc_source_code_analytic_template.render(data)


# Jinja template to display liquidity data
sc_liquidity_template_string = """
{% if pancakeswapv2 %} \
<b>PancakeSwap V2 Pools:</b> \
{% for pool in pancakeswapv2 %}
  <b>Type:</b> {{ pool.type }}
  <b>Pool Address:</b> {{ pool.pool_adr }}
  <b>Base Coin:</b> {{ pool.base_coin }}
  <b>Pool Fee (%):</b> {{ pool.pool_fee }}
  <b>Amount:</b> {{ pool.amount }}
  <b>Price:</b> {{ pool.price }}
{% endfor %} {% endif %} \
{% if pancakeswapv3 %} \
<b>PancakeSwap V3 Pools:</b> \
{% for pool in pancakeswapv3 %}
  <b>Type:</b> {{ pool.type }}
  <b>Pool Address:</b> {{ pool.pool_adr }}
  <b>Base Coin:</b> {{ pool.base_coin }}
  <b>Pool Fee (%):</b> {{ pool.pool_fee }}
  <b>Amount:</b> {{ pool.amount }}
  <b>Price:</b> {{ pool.price }}
{% endfor %} {% endif %} \
{% if uniswapv2 and uniswapv2 | length > 0%} \
<b>Uniswap V2 Pools:</b> \
{% for pool in uniswapv2 %}
  <b>Type:</b> {{ pool.type }}
  <b>Pool Address:</b> {{ pool.pool_adr }}
  <b>Base Coin:</b> {{ pool.base_coin }}
  <b>Pool Fee (%):</b> {{ pool.pool_fee }}
  <b>Amount:</b> {{ pool.amount }}
  <b>Price:</b> {{ pool.price }}
{% endfor %} {% endif %} \
{% if uniswapv3 and uniswapv3 | length > 0 %} \
<b>Uniswap V3 Pools:</b> \
{% for pool in uniswapv3 %}
  <b>Type:</b> {{ pool.type }}
  <b>Pool Address:</b> {{ pool.pool_adr }}
  <b>Base Coin:</b> {{ pool.base_coin }}
  <b>Pool Fee (%):</b> {{ pool.pool_fee }}
  <b>Amount:</b> {{ pool.amount }}
  <b>Price:</b> {{ pool.price }}
{% endfor %} {% endif %}
"""
sc_liquidity_template = Template(sc_liquidity_template_string)
sc_empty_sc_liquidity_template = Template("""<b>No Liquidity Found.</b>""")


# Custom Text widget for Jinja rendering
class CustomLiquidityJinja(Text):
    async def _render_text(self, data, dialog_manager):
        text_html = sc_liquidity_template.render(data)
        if text_html is None or len(text_html.strip()) < 1:
            return sc_empty_sc_liquidity_template.render(data)
        return sc_liquidity_template.render(data)


sc_transfer_info_template_string = """
{% if transfer_info %}
<b>Transfer Information</b>
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –º–æ–Ω–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
<i>–ü–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</i>
Value: {{ transfer_info.transfer_delivered.value }} Status: {{ status_to_icon(transfer_info.transfer_delivered.status) }}
<i>–í–∑–∏–º–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:</i>
Value: {{ transfer_info.transfer_percent.value }} Status: {{ status_to_icon(transfer_info.transfer_percent.status) }}
{% else %} –¢–æ—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ {% endif %}"""
sc_transfer_info_template = Template(sc_transfer_info_template_string)
sc_transfer_info_template.globals['status_to_icon'] = status_to_icon


class CustomJinjaForTransferInfo(Text):
    async def _render_text(self, data, dialog_manager):
        return sc_transfer_info_template.render(data)


social_info_template_string = """
{% if social_info %}
{% if social_info.interest_rate != -1 %} <b>–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è (%):</b> {{ social_info.interest_rate }} \n {% endif %} \
{% if social_info.ignore_rate != -1 %} <b>–ò–≥–Ω–æ—Ä–∏—Ä—É—é—Ç (%):</b>{{ social_info.ignore_rate }} \n {% endif %} \
{% if social_info.attractiveness_score != -1 %}<b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ (%):</b> {{ social_info.attractiveness_score }} \n {% endif %} \
{% if social_info.engagement_score != -1 %}<b>–û—Ü–µ–Ω–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É (%):</b> {{ social_info.engagement_score }} \n {% endif %} \
{% if social_info.liquidity_score != -1 %}<b>–û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:</b> {{ social_info.liquidity_score }} \n {% endif %} \
{% if social_info.community_score != -1 %}<b>–û—Ü–µ–Ω–∫–∞ community —Ç–æ–∫–µ–Ω–∞:</b> {{ social_info.community_score }} \n {% endif %}
<b>–†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {{ social_info.market_ranking }}
{% if social_info.coingecko_rank != -1 %}<b>–†–µ–π—Ç–∏–Ω–≥ coingecko:</b> {{ social_info.coingecko_rank }} \n {% endif %} \
{% if social_info.facebook_followers is not none %} {{ status_to_icon(None, "facebook_followers") }} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Facebook:</b> {{ social_info.facebook_followers }} \n {% endif %} \
{% if social_info.twitter_followers is not none %} {{ status_to_icon(None, "twitter_followers") }} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Twitter:</b> {{ social_info.twitter_followers }} \n {% endif %} \
{% if social_info.reddit_followers is not none %} {{ status_to_icon(None, "reddit_followers") }} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Reddit:</b> {{ social_info.reddit_followers }} \n {% endif %} \
{% if social_info.telegram_followers is not none %} {{ status_to_icon(None, "telegram_followers") }} <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Telegram:</b> {{ social_info.telegram_followers }} \n {% endif %} \
{% if social_info.github_stars is not none %} {{ status_to_icon(None, "github_stars") }} <b>GitHub Stars:</b> {{ social_info.github_stars }} \n {% endif %} \
{% if social_info.github_followers is not none %}<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ GitHub:</b> {{ social_info.github_followers }}{% endif %}
{% else %} –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. {{ error_msg }} {% endif %}
"""

social_info_template = Template(social_info_template_string)
social_info_template.globals['status_to_icon'] = status_to_icon


class CustomJinjaForSocialInfo(Text):
    async def _render_text(self, data, dialog_manager):
        return social_info_template.render(data)

    async def render(self, data):
        return self._render_text(data, None)


sc_ai_analyze_template_string = """
{% if ai_analyze_result %}
<b>–ú–æ—à–µ–Ω–Ω–µ—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {{ ai_analyze_result.is_fraud }}
<b>–ú–µ—Ä–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:</b> {{ ai_analyze_result.ai_data }}
{% else %} Ai-–∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω {{ error_msg }} {% endif %}
"""

ai_analyze_template = Template(sc_ai_analyze_template_string)
# ai_analyze_template.globals['status_to_icon'] = status_to_icon


class CustomJinjaForAiAnalyze(Text):
    async def _render_text(self, data, dialog_manager):
        return ai_analyze_template.render(data)


sc_combined_template_string = sc_base_info_template_string + social_info_template_string + \
                              sc_ai_analyze_template_string + sc_source_code_analytic_template_string + \
                              sc_liquidity_template_string + sc_transfer_info_template_string
sc_combined_template = Template(sc_combined_template_string)
sc_combined_template.globals['status_to_icon'] = status_to_icon


# Custom Text widget for Jinja rendering
class CustomFullInfoJinja(Text):
    async def _render_text(self, data, dialog_manager):
        return sc_combined_template.render(data)


wrap_deeper_info_about_sc = Jinja(
    text="""
–í—ã –≥–ª—É–±–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–∫–µ–Ω <b>{{token_name}}</b>
"""
)


text_command_start = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n" "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu"
)


def text_about_choosen_provider(provider: str) -> str:
    text = (
        f"–û—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider}"
    )
    return text


if __name__ == "__main__":
    for i, v in enumerate(["test", "pol"]):
        print(i, v)
    print("main")
